{"version":3,"sources":["config.js","utils.js","Game.js","PlayerDisplay.js","Guide.js","Board.js","MainContainer.js","CreateGame.js","JoinGame.js","App.js","reportWebVitals.js","index.js"],"names":["roleSets","2","3","4","5","6","7","settings","getValidBishopTargets","G","rolePlayer","object","otherScores","_","omit","scores","Object","keys","filter","x","Math","max","apply","values","validRolePlayerExists","challengers","challengingPlayers","role","chosenRole","length","roles","declarer","i","getRolePlayers","rolePlayers","falseClaimants","forEach","p","push","getActionString","action","players","actionLog","target","actor","map","join","getPlayerSlots","newPlayers","humanPlayers","addActionLog","log","logs","shift","forceResolve","ctx","recentAction","playersToPenalize","others","currentPlayer","noValidRolePlayer","events","setPhase","Masquerade","name","setup","numPlayers","shuffle","gameRoles","Array","fill","reduce","a","b","slice","setupRoles","originalRoles","roleList","console","coinsOnCourt","playersToShow","playerToAct","nextPlayer","chosenAction","swapTarget","roleTarget","revealedPlayers","playerMustSwap","declaredAt","atLeastOneChallenger","phases","resolveRole","turn","order","first","Number","player","next","playOrderPos","moves","chooseTarget","finishRolePhase","target_1","target_2","targetScore","actorScore","swap_1","swap_2","foolSwap","winner","swap_1_role","swap_2_role","effectRoleAction","endPhase","onEnd","onBegin","playOrder","getNextPlayer","includes","stages","challenge","respond","response","playerID","activePlayers","lookAtCard","chooseAction","newLogs","chooseSwapTarget","performSwap","shouldSwap","role_1","role_2","endTurn","declareRole","Date","getTime","setActivePlayers","all","maxMoves","endIf","coins","val","key","gameHasWinner","PlayerDisplay","playerNames","displayRole","className","Guide","handleClose","onClick","Board","props","useState","waitToForce","setWaitToForce","displayGuide","setDisplayGuide","RevealedPlayersDisplay","revealed","getPlayersToReveal","DisplayTargets","targets","onChooseTarget","t","isTarget","ChallengeDisplay","SwapDisplay","onChooseSwap","onChooseRoleTarget","ChoicesDisplay","bishopTargets","otherPlayers","gameover","phase","resolveButtonText","canResolve","actionOptions","DisplayChoices","choices","onChoose","choice","window","setTimeout","k","currentAction","MainContainer","children","CreateGame","randomstring","generate","charset","capitalization","matchId","setMatchId","setPlayers","history","useHistory","createGame","e","gamePlayers","split","trim","data","localStorage","setItem","JSON","stringify","preventDefault","axios","post","gameData","then","onSubmit","htmlFor","id","value","onChange","type","JoinGame","gameName","setGameName","yourName","setYourName","joinGame","require","config","Menu","code","setCode","to","ServerGame","MasqueradeClient","clientOpts","host","matchData","setMatchData","useParams","playerName","setPlayerName","useEffect","get","getMatchData","parse","getItem","game","board","multiplayer","SocketIO","server","process","Client","debug","matchID","isEmpty","matchPlayers","playerIndex","indexOf","autoFocus","toString","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaf77503.chunk.js","sourcesContent":["export const roles = ['judge', 'bishop', 'king', 'queen', 'cheat', 'witch']\n\nconst allRoles = [\n  'judge',\n  'bishop',\n  'king',\n  'fool',\n  'queen',\n  'thief',\n  'witch',\n  'spy',\n  'peasant',\n  'cheat',\n  'inquisitor',\n  'widow',\n]\n\nexport const playerNames = {\n  0: 'bill',\n  1: 'jim',\n  2: 'ed',\n  3: 'bernie',\n  mid_1: 'Middle 1',\n  mid_2: 'Middle 2',\n}\n\nexport const roleSets = {\n  2: ['judge', 'bishop', 'king', 'queen', 'cheat', 'thief'],\n  3: ['judge', 'bishop', 'king', 'queen', 'cheat', 'thief'],\n  4: ['judge', 'bishop', 'king', 'queen', 'cheat', 'thief'],\n  5: ['judge', 'bishop', 'king', 'queen', 'cheat', 'witch'],\n  6: ['judge', 'bishop', 'king', 'queen', 'cheat', 'witch'],\n  7: ['judge', 'bishop', 'king', 'queen', 'cheat', 'witch', 'thief'],\n}\n\nexport const settings = {\n  secondsBeforeForceAllowed: 4,\n}\n","import _ from 'lodash'\nimport { roleSets, settings } from './config'\n\nconst getMax = (object) => {\n  return Object.keys(object).filter((x) => {\n    return object[x] == Math.max.apply(null, Object.values(object))\n  })\n}\n\nexport const getValidBishopTargets = (G, rolePlayer) => {\n  let otherScores = _.omit(G.scores, rolePlayer)\n  return getMax(otherScores)\n}\n\nexport const swapRequired = (G, ctx) => {\n  return false\n  if (G.playerMustSwap) {\n    return true\n  }\n  // First four turns can only choose swap\n  // if (ctx.turn <= 4) {\n  //   return true\n  // }\n  return false\n}\n\nexport const validRolePlayerExists = (G) => {\n  const challengers = [...G.challengingPlayers]\n  const role = G.chosenRole\n  let playerRole, p\n\n  if (challengers.length === 0) {\n    return true\n  } else {\n    if (G.roles[G.declarer] === role) {\n      return G.declarer\n    }\n    for (let i = 0; i < challengers.length; i++) {\n      playerRole = G.roles[challengers[i]]\n\n      if (playerRole === role) {\n        return challengers[i]\n      }\n    }\n  }\n  return false\n}\n\nexport const getPlayersToReveal = (G) => {\n  return [G.declarer, ...G.challengingPlayers]\n}\n\nexport const getRolePlayers = (G) => {\n  let rolePlayers = []\n  let falseClaimants = []\n  const challengers = [...G.challengingPlayers]\n  const role = G.chosenRole\n  const roles = { ...G.roles }\n  if (challengers.length === 0) {\n    rolePlayers = [G.declarer]\n  } else {\n    ;[G.declarer, ...challengers].forEach((p) => {\n      if (G.roles[p] === role) {\n        rolePlayers.push(p)\n      } else {\n        falseClaimants = [...falseClaimants, p]\n      }\n    })\n  }\n  return {\n    rolePlayers,\n    falseClaimants,\n  }\n}\n\nexport const roleNeedsTarget = (role) => {\n  if (['bishop', 'witch'].includes(role)) {\n    return true\n  }\n  return false\n}\n\nexport const gameHasWinner = (G, coins = 13) => {\n  let winner = false\n  _.forEach(G.scores, (val, key) => {\n    if (val >= coins) {\n      winner = key\n    }\n  })\n  return winner\n}\n\nexport const setupRoles = (numPlayers) => {\n  let roles = roleSets[numPlayers]\n  roles = _.shuffle(roles)\n  const gameRoles = Array(numPlayers)\n    .fill(1)\n    .reduce((a, b, i) => {\n      a[i] = roles[i]\n      return a\n    }, {})\n  if (numPlayers === 4) {\n    gameRoles['4'] = roles.slice(-1).shift()\n    gameRoles['5'] = roles.slice(-2).shift()\n  }\n  if (numPlayers === 5) {\n    gameRoles['5'] = roles.slice(-1).shift()\n  }\n  return gameRoles\n}\n\nexport const setupScores = (numPlayers) => {\n  console.log('Setting up for', numPlayers)\n  return Array(numPlayers)\n    .fill('xxx')\n    .reduce((a, b, i) => {\n      a[i] = 6\n      return a\n    }, {})\n}\n\nexport const shouldWaitToForce = (G) => {\n  const timeNow = new Date().getTime()\n  const result = (timeNow - G.declaredAt) / 1000 < settings.secondsBeforeForceAllowed\n  return result\n}\n\nexport const displayAction = (G, players) => {\n  const { recentAction } = G\n  if (!recentAction) {\n    return null\n  }\n  let actionLog\n  if (!recentAction.target) {\n    actionLog = `${players[recentAction.actor]} ${recentAction.action}`\n  } else {\n    actionLog = `${players[recentAction.actor]} ${recentAction.action} ${\n      players[recentAction.target]\n    }`\n  }\n  return actionLog\n}\n\nexport const getActionString = (action, players) => {\n  if (!action) {\n    return null\n  }\n  let actionLog\n  if (!action.target) {\n    actionLog = `${players[action.actor]} ${action.action}`\n  } else {\n    actionLog = `${players[action.actor]} ${action.action} ${players[action.target]}`\n  }\n  if (action.challengers) {\n    actionLog = `${actionLog} (challengers: ${action.challengers.map((p) => players[p]).join(', ')})`\n  }\n  return actionLog\n}\n\nexport const getPlayerSlots = (players) => {\n  const newPlayers = [...players]\n  const humanPlayers = newPlayers.length\n  if (humanPlayers < 6) {\n    newPlayers.push('Middle 1')\n  }\n  if (humanPlayers < 5) {\n    newPlayers.push('Middle 2')\n  }\n  return newPlayers\n}\n","import {\n  getRolePlayers,\n  validRolePlayerExists,\n  gameHasWinner,\n  setupScores,\n  setupRoles,\n} from './utils'\nimport { roleSets } from './config'\n\nconst getNextPlayer = (G, ctx) => {\n  return (ctx.playOrderPos + 1) % ctx.playOrder.length\n}\n\nconst addActionLog = (G, log) => {\n  const logs = G.logs ? [...G.logs] : []\n  logs.push(log)\n  if (logs.length > 5) {\n    logs.shift()\n  }\n  return logs\n}\n\nexport const effectRoleAction = (G, ctx) => {\n  const role = G.chosenRole\n  const target = G.roleTarget\n  const actor = ctx.currentPlayer\n  let recentAction = {\n    actor,\n    action: 'did something unknown',\n  }\n  if (G.challengingPlayers.length > 0 && G.roles[actor] !== role) {\n    return null\n  }\n  const targetScore = G.scores[target]\n  const actorScore = G.scores[actor]\n  let target_1, target_2\n  const { swap_1, swap_2, foolSwap } = G\n  if (role === 'king') {\n    G.scores[actor] = G.scores[actor] + 3\n    recentAction = { actor, action: 'took three coins from the bank as king' }\n  }\n  if (role === 'queen') {\n    G.scores[actor] = G.scores[actor] + 2\n    recentAction = { actor, action: 'took two coins from the bank as queen' }\n  }\n  if (role === 'judge') {\n    G.scores[actor] = G.scores[actor] + G.coinsOnCourt\n    recentAction = { actor, action: `took ${G.coinsOnCourt} coins from the courthouse as judge` }\n    G.coinsOnCourt = 0\n  }\n  if (role === 'witch') {\n    G.scores[actor] = targetScore\n    G.scores[target] = actorScore\n    recentAction = { actor, action: 'swapped fortunes with', target }\n  }\n  if (role === 'bishop') {\n    G.scores[actor] = actorScore + 2\n    G.scores[target] = targetScore - 2\n    recentAction = { actor, action: 'took two coins from', target }\n  }\n  if (role === 'cheat') {\n    if (actorScore >= 10) {\n      G.winner = actor\n    }\n  }\n  if (role === 'widow') {\n    if (actorScore < 10) {\n      G.scores[actor] = 10\n    }\n  }\n  if (role === 'thief') {\n    target_1 = (ctx.playOrderPos + 1) % ctx.numPlayers\n    target_2 = (ctx.numPlayers + ctx.playOrderPos - 1) % ctx.numPlayers\n    G.scores[target_1]--\n    G.scores[target_2]--\n    G.scores[actor] = G.scores[actor] + 2\n    recentAction = { actor, action: 'took a coin from each player beside them' }\n  }\n  if (role === 'fool') {\n    const swap_1_role = G.roles[swap_1]\n    const swap_2_role = G.roles[swap_2]\n    G.scores[actor]++\n    if (foolSwap) {\n      G.roles[swap_1] = swap_2_role\n      G.roles[swap_2] = swap_1_role\n    }\n  }\n  G.logs = addActionLog(G, recentAction)\n}\n\n/*\n * MOVES\n */\n\n// RESOLVE ROLE PHASE\n\nconst chooseTarget = (G, ctx, target) => {\n  G.roleTarget = target\n}\n\nconst finishRolePhase = (G, ctx) => {\n  effectRoleAction(G, ctx)\n  ctx.events.endPhase()\n}\n\n// CHALLENGE STAGE MOVES\n\nconst forceResolve = (G, ctx) => {\n  const { falseClaimants } = getRolePlayers(G)\n  let recentAction\n  G.playersToPenalize = falseClaimants\n  let others = [...G.challengingPlayers]\n  if (!validRolePlayerExists(G)) {\n    G.noValidRolePlayer = true\n    recentAction = {\n      actor: ctx.currentPlayer,\n      action: `was challenged, and nobody was really the ${G.chosenRole}`,\n      challengers: others,\n    }\n  } else {\n    if (G.challengingPlayers.length > 0) {\n      recentAction = {\n        actor: ctx.currentPlayer,\n        action: `was challenged, and the real ${G.chosenRole} was`,\n        target: validRolePlayerExists(G),\n        challengers: others,\n      }\n    } else {\n      recentAction = {\n        actor: ctx.currentPlayer,\n        action: `was not challenged`,\n      }\n    }\n  }\n  G.logs = addActionLog(G, recentAction)\n  ctx.events.setPhase('resolveRole')\n}\n\nconst challengeRespond = (G, ctx, response) => {\n  if (response === 'challenge') {\n    if (!G.challengingPlayers.includes(ctx.playerID)) {\n      G.atLeastOneChallenger = true \n      G.challengingPlayers.push(ctx.playerID)\n    }\n  }\n  if (Object.keys(ctx.activePlayers).length === 2) {\n    forceResolve(G, ctx)\n  }\n}\n\n// BASIC TURN MOVES\n\nconst lookAtCard = (G, ctx) => {\n  G.playersToShow[ctx.currentPlayer] = true\n}\n\nconst chooseAction = (G, ctx, action, actionLog) => {\n  G.chosenAction = action\n  let recentAction\n  if (action === 'look') {\n    recentAction = {\n      actor: ctx.currentPlayer,\n      action: 'looked at their card',\n    }\n    const newLogs = addActionLog(G, recentAction)\n    G.logs = newLogs\n  }\n}\n\nconst chooseSwapTarget = (G, ctx, target) => {\n  G.swapTarget = target\n}\n\nconst performSwap = (G, ctx, shouldSwap) => {\n  if (shouldSwap) {\n    const role_1 = G.roles[ctx.currentPlayer]\n    const role_2 = G.roles[G.swapTarget]\n    G.roles[ctx.currentPlayer] = role_2\n    G.roles[G.swapTarget] = role_1\n  }\n  let recentAction = {\n    actor: ctx.currentPlayer,\n    target: G.swapTarget,\n    action: 'swapped roles (or not) with',\n  }\n  G.logs = addActionLog(G, recentAction)\n  ctx.events.endTurn()\n}\n\nconst declareRole = (G, ctx, role) => {\n  G.chosenRole = role\n  G.declarer = ctx.currentPlayer\n  G.declaredAt = new Date().getTime()\n  ctx.events.setActivePlayers({\n    all: 'challenge',\n    maxMoves: 1,\n  })\n  let recentAction = {\n    actor: ctx.currentPlayer,\n    action: `declared themself ${role}`,\n  }\n  G.logs = addActionLog(G, recentAction)\n}\n\nconst endTurn = (G, ctx) => {\n  ctx.events.endTurn()\n}\n\nexport const Masquerade = {\n  name: 'masquerade',\n  setup: (ctx) => {\n    const roles = setupRoles(ctx.numPlayers)\n    const gameState = {\n      roles,\n      originalRoles: { ...roles },\n      roleList: roleSets[ctx.numPlayers],\n      scores: setupScores(ctx.numPlayers),\n      coinsOnCourt: 1,\n      playersToPenalize: [],\n      chosenRole: null,\n      challengingPlayers: [],\n      playersToShow: [],\n      playerToAct: null,\n      declarer: null,\n      nextPlayer: 0,\n      chosenAction: null,\n      swapTarget: null,\n      roleTarget: null,\n      noValidRolePlayer: false,\n      revealedPlayers: [],\n      playerMustSwap: false,\n      declaredAt: null,\n      atLeastOneChallenger: false,\n      logs: [null, null, null],\n    }\n\n    return gameState\n  },\n\n  phases: {\n    resolveRole: {\n      turn: {\n        order: {\n          first: (G) => {\n            if (G.noValidRolePlayer) {\n              return Number(G.declarer)\n            }\n            let player\n            const { rolePlayers } = getRolePlayers(G)\n            player = rolePlayers[0]\n            return Number(player)\n          },\n          next: (G, ctx) => (ctx.playOrderPos + 1) % ctx.numPlayers,\n        },\n      },\n      moves: {\n        chooseTarget,\n        finishRolePhase,\n      },\n      onEnd: (G, ctx) => {\n        G.playersToPenalize.forEach((p) => {\n          G.scores[p]--\n          G.coinsOnCourt++\n        })\n        G.playersToPenalize = []\n        G.playersToShow = []\n        G.chosenRole = null\n        G.chosenAction = null\n        G.roleTarget = null\n        G.declarer = null\n        G.noValidRolePlayer = false\n        G.atLeastOneChallenger = false\n      },\n    },\n  },\n\n  turn: {\n    onBegin: (G, ctx) => {\n      G.nextPlayer = getNextPlayer(G, ctx)\n      G.challengingPlayers = []\n      if (G.revealedPlayers.includes(ctx.currentPlayer)) {\n        G.playerMustSwap = true\n        G.revealedPlayers = []\n      } else {\n        G.playerMustSwap = false\n      }\n    },\n\n    onEnd: (G, ctx) => {\n      G.swapTarget = null\n      G.chosenAction = null\n      if (G.challengingPlayers.length > 0) {\n        G.revealedPlayers = [G.declarer, ...G.challengingPlayers]\n      }\n      G.playerMustSwap = false\n      G.declaredAt = null\n    },\n\n    order: {\n      first: (G) => {\n        return G.nextPlayer\n      },\n      next: (G, ctx) => (ctx.playOrderPos + 1) % ctx.numPlayers,\n    },\n    stages: {\n      challenge: {\n        moves: {\n          respond: challengeRespond,\n          forceResolve,\n        },\n      },\n    },\n  },\n\n  moves: {\n    lookAtCard,\n    chooseAction,\n    chooseSwapTarget,\n    performSwap,\n    declareRole,\n    endTurn,\n  },\n  endIf: (G) => {\n    if (G.winner) {\n      return {\n        winner: G.winner,\n      }\n    }\n    const winner = gameHasWinner(G)\n    if (winner) {\n      return {\n        winner: winner,\n      }\n    }\n  },\n}\n","import _ from 'lodash'\n\nconst PlayerDisplay = ({ playerID, ctx, G, playerNames, displayRole }) => {\n  return (\n    <>\n      <div className=\"row\">\n        {_.map(G.originalRoles, (val, key) => {\n          const currentPlayer = ctx.currentPlayer === key\n          return (\n            <div className=\"col-6 col-md-3 p-2\" key={`player-${key}`}>\n              <div className=\"card shadow text-center bg-gray p-2\">\n                <p className={currentPlayer ? 'text-bold' : ''}>{playerNames[key]} </p>\n                {G.scores[key] && <p>Treasure: {G.scores[key]}</p>}\n                {displayRole && <p>{val}</p>}\n              </div>\n            </div>\n          )\n        })}\n        <div className=\"col-6 col-md-3 p-2\">\n          <div className=\"card shadow text-center bg-gray p-2\">\n            <p>Courthouse</p>\n            <p>Treasure: {G.coinsOnCourt}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default PlayerDisplay\n","const Guide = ({ handleClose }) => {\n  return (\n    <>\n      <h3>Role actions</h3>\n      <ul>\n        <li>king - 3 coins from the bank</li>\n        <li>queen - 2 coins from the bank</li>\n        <li>judge - all coins from the courthouse</li>\n        <li>cheat - wins the game if 10+ coins</li>\n        <li>thief - take 1 coin from each player to left and right</li>\n        <li>bishop - take 2 coins from richest player (choose if tied)</li>\n        <li>witch - swap fortunes with another player</li>\n      </ul>\n      <button onClick={handleClose} className=\"btn btn-outline-dark\">\n        Back\n      </button>\n    </>\n  )\n}\n\nexport default Guide\n","import React, { useState } from 'react'\nimport _ from 'lodash'\n\nimport { settings } from './config'\nimport {\n  getValidBishopTargets,\n  swapRequired,\n  getPlayersToReveal,\n  roleNeedsTarget,\n  getActionString,\n} from './utils'\nimport PlayerDisplay from './PlayerDisplay'\nimport Guide from './Guide'\n\nconst Board = (props) => {\n  const { playerID, ctx, G, moves, playerNames } = props\n  const [waitToForce, setWaitToForce] = useState(false)\n  const [displayGuide, setDisplayGuide] = useState(false)\n  console.log('G', G)\n  console.log('ctx', ctx)\n\n  if (displayGuide) {\n    return <Guide handleClose={() => setDisplayGuide(false)} />\n  }\n\n  const RevealedPlayersDisplay = (props) => {\n    const { G } = props\n    const revealed = getPlayersToReveal(G)\n    return (\n      <>\n        <div className=\"row\">\n          {_.map(revealed, (key) => {\n            return (\n              <div className=\"p-3 col-3\" key={`revealed-${key}`}>\n                <div className=\"card shadow text-center bg-gray p-3\">\n                  <p>{playerNames[key]} </p>\n                  <p>{G.roles[key]}</p>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </>\n    )\n  }\n\n  const DisplayTargets = ({ targets, onChooseTarget }) => {\n    return (\n      <div className=\"row\">\n        {targets.map((t, i) => {\n          const isTarget = G.roleTarget === t\n          return (\n            <div className=\"col-4 col-md-2\" key={t}>\n              <button\n                className={`btn btn-outline-dark ${isTarget ? 'active' : ''}`}\n                onClick={() => onChooseTarget(t)}\n              >\n                {isTarget && '*'}\n                {playerNames[t]} - {G.scores[t]}\n                {isTarget && '*'}\n              </button>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  const ChallengeDisplay = (props) => {\n    const { ctx, G, moves, playerID } = props\n    console.log('your playerId', playerID)\n    console.log('active players', Object.keys(ctx.activePlayers))\n\n    return (\n      <>\n        <div className=\"row\">\n          <h2>\n            {playerNames[ctx.currentPlayer]} is claiming {G.chosenRole}\n          </h2>\n        </div>\n        {Object.keys(ctx.activePlayers).includes(playerID) ? (\n          <div className=\"row\">\n            <div className=\"col-4 pb-3\">\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={() => {\n                  console.log('Challenge!')\n                  moves.respond('challenge')\n                }}\n              >\n                Challenge!\n              </button>\n            </div>\n            <div className=\"col-4 pb-3\">\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={() => {\n                  console.log('Allow!')\n                  moves.respond('allow')\n                }}\n              >\n                Allow!\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"row\">\n            <p>Waiting for others to respond</p>\n          </div>\n        )}\n      </>\n    )\n  }\n\n  const SwapDisplay = (props) => {\n    const swapOptions = _.map(G.roles, (val, key) => key)\n    return (\n      <>\n        {G.swapTarget === null ? (\n          <>\n            <div className=\"row\">\n              <div className=\"col\">\n                <h4>Swap with:</h4>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              {_.map(G.roles, (val, key) => {\n                if (key !== playerID) {\n                  return (\n                    <div key={`swap-${key}`} className=\"col-4 col-md-2 pb-4\">\n                      <button\n                        className=\"btn btn-outline-dark\"\n                        onClick={() => {\n                          onChooseSwap(key)\n                        }}\n                        key={key}\n                      >\n                        {playerNames[key]}\n                      </button>\n                    </div>\n                  )\n                }\n              })}\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"row pb-3\">\n              <div className=\"col\">\n                <h4>Swap cards with {playerNames[G.swapTarget]}?</h4>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-6 col-md-4\">\n                <button className=\"btn btn-outline-dark\" onClick={() => moves.performSwap(true)}>\n                  Yes, really swap\n                </button>\n              </div>\n              <div className=\"col-6 col-md-4\">\n                <button className=\"btn btn-outline-dark\" onClick={() => moves.performSwap(false)}>\n                  No, keep my own card\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n      </>\n    )\n  }\n\n  const resolveRole = () => {\n    if (['king', 'queen', 'cheat', 'judge', 'widow', 'thief'].includes(G.chosenRole)) {\n      return moves.finishRolePhase()\n    }\n    if (['bishop', 'witch'].includes(G.chosenRole)) {\n      if (G.roleTarget !== null) {\n        return moves.finishRolePhase()\n      }\n      console.log('No target chosen')\n    }\n  }\n\n  const onChooseAction = (action) => {\n    let actionLog = ''\n    if (action === 'look') {\n      actionLog = `${playerNames[ctx.currentPlayer]} looked at their card`\n    }\n    moves.chooseAction(action, actionLog)\n  }\n\n  const onChooseSwap = (target) => {\n    moves.chooseSwapTarget(target)\n  }\n\n  const onChooseRoleTarget = (target) => {\n    moves.chooseTarget(target)\n  }\n\n  const ChoicesDisplay = ({ G }) => {\n    const role = G.chosenRole\n    switch (role) {\n      case 'bishop':\n        const bishopTargets = getValidBishopTargets(G, playerID)\n        return (\n          <>\n            <div className=\"row\">\n              <h3>Choose who to take from:</h3>\n            </div>\n            <DisplayTargets targets={bishopTargets} onChooseTarget={onChooseRoleTarget} />\n          </>\n        )\n      case 'witch':\n        const otherPlayers = _.omit(G.scores, playerID)\n        return (\n          <>\n            <h3>Choose who you want to swap fortunes with:</h3>\n            <DisplayTargets\n              targets={Object.keys(otherPlayers)}\n              onChooseTarget={onChooseRoleTarget}\n            />\n          </>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  if (ctx.gameover) {\n    return (\n      <>\n        <h2>Game Over!</h2>\n        <div>Winner: {playerNames[ctx.gameover.winner]}</div>\n        <PlayerDisplay {...props} />\n      </>\n    )\n  }\n\n  if (G.noValidRolePlayer) {\n    return (\n      <div className=\"container\">\n        <h3>Nobody was the {G.chosenRole}</h3>\n        <RevealedPlayersDisplay G={G} />\n        {ctx.currentPlayer === playerID && (\n          <div className=\"row\">\n            <button\n              className=\"btn btn-outline-dark\"\n              onClick={() => {\n                moves.finishRolePhase()\n              }}\n            >\n              Okay, end turn\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  if (ctx.phase === 'resolveRole') {\n    if (ctx.currentPlayer === playerID) {\n      let resolveButtonText = 'Resolve'\n      if (G.chosenRole === 'witch') {\n        resolveButtonText = 'Swap fortunes'\n      }\n      if (G.chosenRole === 'bishop') {\n        resolveButtonText = 'Take two coins from target'\n      }\n      if (G.chosenRole === 'king') {\n        resolveButtonText = 'Take 3 coins from bank'\n      }\n      if (G.chosenRole === 'queen') {\n        resolveButtonText = 'Take 2 coins from bank'\n      }\n      if (G.chosenRole === 'judge') {\n        resolveButtonText = `Take ${G.coinsOnCourt} coins from courthouse`\n      }\n      if (G.chosenRole === 'cheat') {\n        if (G.scores[ctx.currentPlayer] >= 10) {\n          resolveButtonText = `Win the game`\n        } else {\n          resolveButtonText = `Do nothing`\n        }\n      }\n      const canResolve = !roleNeedsTarget(G.chosenRole) || G.roleTarget !== null\n      return (\n        <div className=\"container\">\n          <h3>\n            You are playing as {G.chosenRole}! You have {G.scores[playerID]} coins.\n          </h3>\n          {G.challengingPlayers.length > 0 && <RevealedPlayersDisplay G={G} />}\n\n          <ChoicesDisplay G={G} />\n          {canResolve && (\n            <div className=\"row pt-3\">\n              <div className=\"col\">\n                <button className=\"btn btn-outline-dark\" onClick={resolveRole}>\n                  {resolveButtonText}\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    return (\n      <p>\n        {G.challengingPlayers.length > 0 && <RevealedPlayersDisplay G={G} />}\n        Waiting for the {G.chosenRole} ({playerNames[ctx.currentPlayer]}) to play...\n      </p>\n    )\n  }\n\n  const actionOptions = swapRequired(G, ctx) ? ['swap'] : ['roleplay', 'swap', 'look']\n\n  const DisplayChoices = ({ choices, onChoose }) => {\n    return (\n      <div className=\"row\">\n        {choices.map((choice) => {\n          return (\n            <div className=\"col-4 col-md-2 pb-3\" key={`${choice}-button`}>\n              <button className=\"btn btn-outline-dark\" onClick={() => onChoose(choice)}>\n                {choice}\n              </button>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"status-bar\">\n        <p>\n          You are: {playerNames[playerID]} {ctx.currentPlayer === playerID && '(your turn)'}\n        </p>\n      </div>\n      <div>\n        {ctx.currentPlayer === playerID && G.chosenAction === null && (\n          <>\n            <div className=\"row pt-2\">\n              <div className=\"col pb-3\">\n                <h4>Choose your action:</h4>\n              </div>\n            </div>\n\n            <DisplayChoices choices={actionOptions} onChoose={onChooseAction} />\n          </>\n        )}\n\n        {ctx.currentPlayer === playerID && G.chosenAction === 'look' && (\n          <div className=\"row pt-4\">\n            <div className=\"col-3\">\n              <div className=\"text-center\">\n                <p>Your role: {G.roles[playerID]}</p>\n              </div>\n            </div>\n\n            <div className=\"col-4 pb-3\">\n              <button className=\"btn btn-outline-dark\" onClick={() => moves.endTurn()}>\n                Okay, end turn\n              </button>\n            </div>\n          </div>\n        )}\n\n        {ctx.currentPlayer === playerID && G.chosenAction === 'roleplay' && (\n          <>\n            {G.chosenRole ? (\n              <>\n                <h2>Waiting for others to challenge</h2>\n                {waitToForce ? (\n                  <button className=\"btn btn-outline-dark disabled\">Resolve (wait)</button>\n                ) : (\n                  <button className=\"btn btn-outline-dark\" onClick={() => moves.forceResolve()}>\n                    Resolve\n                  </button>\n                )}\n              </>\n            ) : (\n              <>\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <h4 className=\"mb-4\">Choose your role:</h4>\n                  </div>\n                </div>\n                <DisplayChoices\n                  choices={G.roleList}\n                  onChoose={(choice) => {\n                    moves.declareRole(choice)\n                    setWaitToForce(true)\n                    window.setTimeout(() => {\n                      setWaitToForce(false)\n                    }, settings.secondsBeforeForceAllowed * 1000)\n                  }}\n                />\n              </>\n            )}\n          </>\n        )}\n\n        {ctx.currentPlayer === playerID && G.chosenAction === 'swap' && <SwapDisplay {...props} />}\n\n        <hr />\n\n        {ctx.currentPlayer !== playerID && G.chosenRole !== null && (\n          <ChallengeDisplay {...props} />\n        )}\n\n        <PlayerDisplay {...props} displayRole={true} />\n        <div className=\"row\">\n          {ctx.activePlayers && (\n            <div className=\"col\">\n              Waiting for:{' '}\n              {Object.keys(ctx.activePlayers)\n                .map((k) => {\n                  return playerNames[k]\n                })\n                .join(', ')}\n            </div>\n          )}\n        </div>\n        {G.currentAction && <p>Current Action: {G.currentAction}</p>}\n      </div>\n      <div className=\"row pt-3\">\n        {/* <p>Last actions:</p> */}\n        {G.logs && (\n          <ul className=\"log\">\n            {G.logs.map((log, i) => {\n              if (!log) {\n                return null\n              }\n              return <li key={`log-${i}`}>{getActionString(log, playerNames)}</li>\n            })}\n          </ul>\n        )}\n      </div>\n      <div className=\"row\">\n        <p>\n          <button className=\"btn btn-outline-dark\" onClick={() => setDisplayGuide(true)}>\n            Guide\n          </button>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Board\n","const MainContainer = (props) => {\n  return (\n    <div className=\"container main mt-4 bg-white p-4 shadow rounded\">\n      {props.children}\n    </div>\n  )\n}\n\nexport default MainContainer\n","import { useState } from 'react'\nimport randomstring from 'randomstring'\nimport {\n  useHistory,\n} from 'react-router-dom'\nimport axios from 'axios'\nimport MainContainer from './MainContainer'\n\nconst CreateGame = () => {\n  const [matchId, setMatchId] = useState(\n    randomstring.generate({\n      charset: 'alphabetic',\n      length: 4,\n      capitalization: 'lowercase',\n    }),\n  )\n  const [players, setPlayers] = useState('jane, joe, milly, bill')\n  const history = useHistory()\n\n  const createGame = async (e) => {\n    const gamePlayers = players.split(',').map((p) => p.trim())\n    console.log(gamePlayers)\n    const data = {\n      matchId: matchId,\n      players: gamePlayers,\n      numPlayers: gamePlayers.length,\n    }\n    window.localStorage.setItem('gameData', JSON.stringify(data))\n    e.preventDefault()\n    console.log(data)\n    axios\n      .post('/db/game', {\n        matchId,\n        gameData: data,\n      })\n      .then(() => history.push(`/host/${data.matchId}`))\n  }\n\n  return (\n    <MainContainer>\n      <h2 className=\"mb-4\">Create Game</h2>\n      <form onSubmit={createGame}>\n        <div>\n          <label htmlFor=\"game-name\">Game Name</label>\n          <input\n            className=\"ml-3\"\n            id=\"game-name\"\n            value={matchId}\n            onChange={(e) => {\n              setMatchId(e.target.value)\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"game-players\">Players</label>\n          <input\n            className=\"w-50 ml-3 mb-4\"\n            id=\"game-players\"\n            value={players}\n            onChange={(e) => {\n              setPlayers(e.target.value)\n            }}\n          />\n        </div>\n        <div>\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Create\" />\n        </div>\n      </form>\n    </MainContainer>\n  )\n}\n\nexport default CreateGame\n","import { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport MainContainer from './MainContainer'\n\n\nconst JoinGame = () => {\n  const [gameName, setGameName] = useState('')\n  const [yourName, setYourName] = useState('')\n  const history = useHistory()\n\n  const joinGame = async (e) => {\n    history.push(`/join/${gameName}/${yourName}`)\n  }\n\n  return (\n    <MainContainer>\n      <h2 className=\"mb-4\">Join Game</h2>\n      <form onSubmit={joinGame}>\n        <div>\n          <label htmlFor=\"game-name\">Game Name</label>\n          <input\n            className=\"ml-3 mb-3\"\n            id=\"game-name\"\n            value={gameName}\n            onChange={(e) => {\n              setGameName(e.target.value)\n            }}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"your-name\">Your Name</label>\n          <input\n            className=\"ml-3 mb-4\"\n            id=\"your-name\"\n            value={yourName}\n            onChange={(e) => {\n              setYourName(e.target.value)\n            }}\n          />\n        </div>\n\n        <div>\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Join Game\" />\n        </div>\n      </form>\n    </MainContainer>\n  )\n}\n\nexport default JoinGame\n","import './styles/index.scss'\nimport _ from 'lodash'\nimport { Masquerade } from './Game'\nimport { Client } from 'boardgame.io/react'\nimport { Local } from 'boardgame.io/multiplayer'\nimport { SocketIO } from 'boardgame.io/multiplayer'\nimport Board from './Board'\nimport CreateGame from './CreateGame'\nimport JoinGame from './JoinGame'\nimport React, { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link, useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { getPlayerSlots } from './utils'\nimport MainContainer from './MainContainer'\n\nrequire('dotenv').config()\n\nconst Menu = () => {\n  const [code, setCode] = useState('')\n  return (\n    <MainContainer>\n      <Link to=\"/create\">Host</Link>\n      <hr />\n      <Link to={`/join/${code}`}>Join (enter code):</Link>\n      <input className=\"ml-3\" value={code} onChange={(e) => setCode(e.target.value)} />\n    </MainContainer>\n  )\n}\n\nconst ServerGame = (props) => {\n  const { host } = props\n  let playerId, numPlayers, players\n  let MasqueradeClient\n  const [matchData, setMatchData] = useState({})\n  const { matchId, yourName } = useParams()\n  const [playerName, setPlayerName] = useState(yourName || '')\n  let clientOpts\n\n  useEffect(() => {\n    const getMatchData = async () => {\n      axios.get(`/db/game/${matchId}`).then(({ data }) => {\n        if (data.gameData) {\n          setMatchData(data.gameData)\n        }\n      })\n    }\n    return getMatchData()\n  }, [matchId])\n\n  if (host) {\n    const data = JSON.parse(window.localStorage.getItem('gameData'))\n    console.log('saved data', data)\n    playerId = '0'\n    numPlayers = data.numPlayers\n    players = data.players\n    clientOpts = {\n      game: Masquerade,\n      numPlayers,\n      board: Board,\n      multiplayer: SocketIO({\n        server:\n          process.env.NODE_ENV === 'production'\n            ? process.env.REACT_APP_SOCKET_SERVER\n            : 'localhost:8010',\n      }),\n    }\n    console.log('client opts', clientOpts)\n    MasqueradeClient = Client({ ...clientOpts, debug: false })\n\n    return (\n      <MainContainer>\n        <MasqueradeClient matchID={matchId} playerID={'0'} playerNames={getPlayerSlots(players)} />\n      </MainContainer>\n    )\n  }\n\n  if (_.isEmpty(matchData)) {\n    return null\n  }\n\n  const matchPlayers = matchData.players\n\n  MasqueradeClient = Client({\n    game: Masquerade,\n    numPlayers: matchPlayers.length,\n    board: Board,\n    multiplayer: SocketIO({\n      server:\n        process.env.NODE_ENV === 'production'\n          ? process.env.REACT_APP_SOCKET_SERVER\n          : 'localhost:8010',\n    }),\n    debug: false,\n  })\n\n  const playerIndex = matchPlayers.indexOf(playerName)\n\n  if (playerIndex === -1) {\n    return (\n      <MainContainer>\n        <p className=\"mb-3\">Who are you?</p>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n          }}\n        >\n          <input\n            value={playerName}\n            autoFocus\n            onChange={(e) => {\n              // window.localStorage.setItem('savedName', e.target.value)\n              setPlayerName(e.target.value)\n            }}\n          />\n        </form>\n      </MainContainer>\n    )\n  }\n\n  return (\n    <MainContainer>\n      <MasqueradeClient\n        matchID={matchId}\n        playerID={playerIndex.toString()}\n        playerNames={getPlayerSlots(matchPlayers)}\n      />\n    </MainContainer>\n  )\n}\n\nfunction LocalGame() {\n  const MasqueradeClient = Client({\n    game: Masquerade,\n    numPlayers: 4,\n    board: Board,\n    multiplayer: Local({\n      persist: true,\n    }),\n  })\n\n  const playerNames = ['bill', 'jim', 'ed', 'bernie']\n\n  return (\n    <div className=\"container\">\n      <MasqueradeClient playerID={'0'} playerNames={getPlayerSlots(playerNames)} />\n      <hr />\n      <MasqueradeClient playerID={'1'} playerNames={getPlayerSlots(playerNames)} />\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/create\">\n          <CreateGame />\n        </Route>\n        <Route path=\"/host/:matchId\">\n          <ServerGame host={true} />\n        </Route>\n        <Route path=\"/join/:matchId/:yourName\">\n          <ServerGame />\n        </Route>\n        <Route path=\"/join/:matchId\">\n          <ServerGame />\n        </Route>\n        <Route exact path=\"/join\">\n          <JoinGame />\n        </Route>\n        {/* <Route path=\"/local\">\n          <LocalGame />\n        </Route> */}\n        <Route path=\"/\">\n          <Menu />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Directly from './Directly'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}